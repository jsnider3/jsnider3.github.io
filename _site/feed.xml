<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>(\x -&gt; &quot;Blog&quot;)</title>
    <description>An attempt at a blog by someone who thinks Haskell is cool.</description>
    <link>http://www.joshuasnider.com/</link>
    <atom:link href="http://www.joshuasnider.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Unbeatable Tic Tac Toe</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.joshuasnider.tictactoe&quot;&gt;
  &lt;img alt=&quot;Get it on Google Play&quot; src=&quot;https://developer.android.com/images/brand/en_generic_rgb_wo_45.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;intro&quot;&gt;Intro&lt;/h4&gt;

&lt;p&gt;I’m not a fan of mobile games that allow you to bribe your way to victory,
even though they are as reliable a business model as advertising is for
websites. I wanted to learn Android programming and making a parody of this
type of game seemed like a decent scope for a “My First Android” kind of
project. Thus, I set out to create a game of tic-tac-toe where the AI plays
 perfectly (and is therefore unbeatable) unless you pay 99 cents in which
case it plays randomly and can be beaten 99.4792%&lt;sup&gt;1&lt;/sup&gt; of the time.&lt;/p&gt;

&lt;h4 id=&quot;design-overview&quot;&gt;Design overview&lt;/h4&gt;

&lt;p&gt;I needed four classes for this a &lt;code&gt;TicTacToeBoard&lt;/code&gt; which stored a game state,
calculated the computer’s moves, and provided a variety of library
functions, a &lt;code&gt;MainActivity&lt;/code&gt; which showed the actual tic tac toe board and
had a drop down menu, an &lt;code&gt;AboutPage&lt;/code&gt; which was an activity that showed some
info about me, and a &lt;code&gt;ScorePage&lt;/code&gt; which was an activity that displayed the
user’s cumulative wins, losses, and draws.&lt;/p&gt;

&lt;p&gt;When the app needed to save &lt;code&gt;MainActivity&lt;/code&gt;’s state it did so by writing the
board out as 10 strings, 9 to represent the text in each space and one to
say which person had just moved, we then had two strings to say the
computer and player’s chars.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;In our long-term storage, we currently have flags to keep track of whether
we have ever played before and whether the game is currently in easy
mode&lt;sup&gt;3&lt;/sup&gt;, we then store integers for the user’s number of wins,
losses, and draws.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;h4 id=&quot;challenges-encountered&quot;&gt;Challenges encountered&lt;/h4&gt;

&lt;p&gt;Making my first Android app was a quick journey, but one beset by challenges.
Most of them were due to me not yet knowing how to do Android programming,
but one or two may have been actually difficult. &lt;/p&gt;

&lt;p&gt;There were three bugs that troubled me long enough for me to have made a
ticket for them. First, when I was trying to set the &lt;code&gt;MainActivity&lt;/code&gt; as an
&lt;code&gt;onClickListener&lt;/code&gt; for the nine buttons it would crash. The fix for this was
to call &lt;code&gt;setContentView&lt;/code&gt; before trying to register for those events. Second,
rotating &lt;code&gt;MainActivity&lt;/code&gt;’s screen would make the tic-tac-toe board disappear.
I fixed this at first by fixing the orientation of &lt;code&gt;MainActivity&lt;/code&gt;. I then
fixed it properly by making &lt;code&gt;TicTacToeBoard&lt;/code&gt; implement &lt;code&gt;Parcelable&lt;/code&gt; and overriding
&lt;code&gt;onSaveInstanceState&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState&lt;/code&gt;. This solution had a bug
where pressing the Verizon button on my phone would cause it to crash,
this was just a dumb mistake in my parceling code. Third, it wouldn’t
preserve anything when I switched screens or logged in or out. This was
solved by setting &lt;code&gt;android:launchMode=&quot;singleTop&quot;&lt;/code&gt; in the manifest.&lt;sup&gt;5&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Something I struggled with generally, but that isn’t technically a bug was
in app billing. There’s a good tutorial &lt;a href=&quot;http://developer.android.com/google/play/billing/billing_integrate.html&quot;&gt;here&lt;/a&gt;
which was helpful at the end after I tried everything else. Testing my in-app
billing was also kinda hard, since Google doesn’t allow developers to buy
things from themselves&lt;sup&gt;6&lt;/sup&gt;. What you’re supposed to do is have a
spare device with a test account installed on it. Since I currently only
own one phone, I just reached out to a friend, Kunal, who does mobile
programming and got them to be a beta tester for me. He also helped by
telling me the “best” way to fix some of the bugs I encountered in the
previous paragraph.&lt;/p&gt;

&lt;h4 id=&quot;future-work&quot;&gt;Future work&lt;/h4&gt;

&lt;p&gt;There were a lot of possible enhancements that I would or should put in a
more commercial app, but which I decided were out-of-scope for this. I should
have used a namespace for my product ID, I went with &lt;code&gt;&quot;sku_easy_mode&quot;&lt;/code&gt; because
I saw an example somewhere using SKUs. They may have meant it in a different
way. I could have used a licensing scheme to validate that the app was
installed from the official channel, but I wasn’t convinced this would
benefit me and I ran into time constraints before getting back around to it.
I could have made some popups to talk with the user, but I felt that toasts
were sufficient for my purposes. I could have had an Unbeatable TicTacToe logo
show up, which would change into a Beatable TicTacToe logo when easy mode
was enabled. &lt;/p&gt;

&lt;p&gt;I might want to take the current app and just make it look prettier. The about
page could have separate text boxes for the links with thumbnail images next to
them, the score page could have big text boxes for the actual score and then a
message at the bottom making a snarky comment about the user either being bad
at the game (if they lose a lot), being just as smart as a computer (if they
mostly draw), or wasting money on tic-tac-toe (if they win a couple times with
easy mode), the main activity could have stylized text boxes to make the
tic-tac-toe board prettier and it could resize to fill the screen. I also have
an idea for a much more serious game than tic-tac-toe, but as a firm believer
that ideas are worthless and execution is everything I’ll wait to announce it
until I actually have an alpha.&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;One thing I really want on Android is a music player that preserves your spot
when you pause and come back later. The default music player on my Samsung
doesn’t do that, but if you download a long audio file, say a podcast, as an
mp3 and try to listen to it in pieces it’s critical that you can find the
spot you left off easily. I’m going to look around for pre-existing work
before I do this though.&lt;/p&gt;

&lt;h4 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h4&gt;

&lt;p&gt;I needed to get a Google Play Developer account and a Google Pay Merchant
account in order to publish this app. I’m on the very edge of getting my own
LLC and officially becoming a business, but I’ll most likely delay that
until I have separate business income. &lt;/p&gt;

&lt;p&gt;I also learned to use a more modern IDE, most of my programming is done in
gvim, but all of the Android tutorials I read wanted me to use Android Studio
and my desire to be a rebel just wasn’t strong enough. This worked well for
me, autocompletion was a nice feature and so was being able to run an app by
clicking a button. Looking back, this project is a lot like life. I could
have done it a lot better, but I stand by the work I did.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Footnotes:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;This is an exact number. I know this because Jane Street had a puzzle
to find this number in &lt;a href=&quot;https://www.janestreet.com/puzzles/solutions/may-2015-solution/&quot;&gt;May&lt;/a&gt;.
I have a programmatic solution &lt;a href=&quot;https://github.com/jsnider3/Workspace/blob/master/Competitive/OCaml/tictacs.ml&quot;&gt;here&lt;/a&gt;, 
but this can also be calculated by hand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some of that data is redundant. For example, if we know the player’s
symbol, we can find the computer’s symbol, if we have the game board
we can determine if X just moved by seeing if there are more X’s than O’s.
The minimum number of bits needed to store the TicTacToeBoard is 16. One
bit tracks whether the player is X or O, we then need &lt;code&gt;log2(3)&lt;/code&gt; bits to store
whether each of the nine spots is an X, O, or free. &lt;code&gt;log2(3) * 9+1 = 15.2646625065&lt;/code&gt;
bits, which rounds up to 16. My choice to store redundant data is solely
because I believe that programmer time and the risk of bugs that naturally
comes with more complex code is more expensive than disk space.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tracking whether the game is currently in “easy mode” should probably be
stored in a &lt;code&gt;Bundle&lt;/code&gt; by &lt;code&gt;onSaveInstanceState&lt;/code&gt; not in our &lt;code&gt;SharedPreferences&lt;/code&gt;.
This will change in the next update.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Of course, this means that if someone plays more than two billion times.
Parts of their score may start to wrap around to negative two billion. If
you plan on playing this game that much, please let me know and I will
fix this issue.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I essentially had
&lt;a href=&quot;http://stackoverflow.com/q/20819019/why-is-ondestroy-always-called-when-returning-to-parent-activity&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As explained in don smolen’s answer
&lt;a href=&quot;http://stackoverflow.com/q/14139034/testing-in-app-billing-the-publisher-cannot-purchase-this-item&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Somewhat relevant reading is &lt;a href=&quot;http://blog.jpl-consulting.com/2012/04/why-i-wont-sign-your-nda/&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/android/gaming/2015/08/17/tictactoe/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/android/gaming/2015/08/17/tictactoe/</guid>
      </item>
    
      <item>
        <title>Esovectors</title>
        <description>&lt;p&gt;In practical terms, resizable arrays (implemented by &lt;code&gt;std::vector&lt;/code&gt; in
C++)&lt;sup&gt;1&lt;/sup&gt; are a very good data structure and in most respects compare
favorably to linked lists. They fit better into memory caches, have less
overhead, and support indexing in constant time. Their actual downsides are that
inserting and deleting in arbitrary locations takes linear time. This is
because we need to move up to the entire array when we change the first
element in it. In addition, we will also need to move the entire array
when it changes size too much. The reallocation amortizes away to be a
constant time, but it’s still an occasional&lt;sup&gt;2&lt;/sup&gt; &lt;code&gt;O(n)&lt;/code&gt; for
insertions/deletions within a constant of the end.&lt;/p&gt;

&lt;p&gt;I’ll introduce a variant of the resizable array which allows us to have
constant &lt;code&gt;O(n)&lt;/code&gt; complexity for insertions and deletions at the end and see
if it can solve the issue of arbitrary changes taking &lt;code&gt;O(n)&lt;/code&gt; time. I call
these “esovectors” as they are an esoteric version of a vector.&lt;sup&gt;3&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The way current resizable arrays work is that when you reach a certain
point, you allocate an entirely new block of memory, copy everything over
to it, and then free the block of memory you were previously used. This
works well, but still means that you’re obliged to copy blocks of unbounded
size. An alternative approach is to when we reach
a limit, allocate a second array, copy a constant amount over, and then copy
another constant of us over. By adjusting the point at which we reallocate
and the amount that we copy over, we can make sure that our old array is
empty at the same time our new array becomes full. For indexing operations,
we just need to check which buffer the nth element would be in and then index
into that one as normal. Like in normal vectors, indexing continues to take
&lt;code&gt;O(1)&lt;/code&gt; time.&lt;/p&gt;

&lt;p&gt;The additional space needed by this is &lt;code&gt;O(n)&lt;/code&gt;, which matches the &lt;code&gt;O(n)&lt;/code&gt; used
by normal vectors, but it’s a worse &lt;code&gt;O(n)&lt;/code&gt; since we need to maintain a new
array almost twice as big as our old away, whereas vectors are at worst
half full.&lt;sup&gt;4&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;However, a critical issue to consider is the cost of memory allocation,
which greatly exceeds the cost of writing a single element of an array,
though is also trivially fast. The running time of &lt;code&gt;malloc&lt;/code&gt; is entirely
dependent on the implementation chosen by the system, but in most cases
is unrelated to the number of bytes we are requesting. We shall assume
that our &lt;code&gt;malloc&lt;/code&gt; uses two level segregate fit&lt;sup&gt;5&lt;/sup&gt; which is &lt;code&gt;O(1)&lt;/code&gt;
time. Therefore, &lt;code&gt;malloc&lt;/code&gt; does not affect our worst case appending performance.&lt;/p&gt;

&lt;p&gt;I’ve shown how to modify dynamic arrays to support appending and removing
from the end in constant time, not just amortized constant time. Another
data type that is frequently implemented using dynamic arrays is the
double ended queue, which in addition to supporting the same operations
as dynamic arrays in the same time, they support popping and inserting
at the beginning in amortized constant time. I will leave it as an exercise
to the reader how to extend esovectors to support this behavior in
non-amortized constant time.&lt;sup&gt;6&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Footnotes:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;They have many names: array lists, growable arrays, etc. Wikipedia calls
  them &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_array&quot;&gt;dynamic arrays.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How often this occasional reallocation happens depends on the growth factor
  &lt;code&gt;g&lt;/code&gt; which determines how much bigger the array becomes each time it’s
  reallocated. There is some interesting reading on this topic
  &lt;a href=&quot;https://github.com/facebook/folly/blob/master/folly/docs/FBVector.md&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I have an implementation and test cases 
  &lt;a href=&quot;https://github.com/jsnider3/Workspace/tree/master/Esovector&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The worst case for both is when we have &lt;code&gt;n&lt;/code&gt; elements in an array of size &lt;code&gt;n&lt;/code&gt;
  and try to insert an additional element. Traditional vectors allocate
  a new array of size &lt;code&gt;2n&lt;/code&gt; and then use it to store &lt;code&gt;n + 1&lt;/code&gt; elements.
  For esovectors we allocate a new array of size &lt;code&gt;2n&lt;/code&gt;, put 2 elements
  in it, and leave &lt;code&gt;n - 1&lt;/code&gt; elements in our old array.&lt;sup&gt;7&lt;/sup&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Introduced in &lt;a href=&quot;http://www.gii.upv.es/tlsf/files/ecrts04_tlsf.pdf&quot;&gt;this paper.&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read this as “I want someone else to do my work for me.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This assumes a growth factor of 2, which is common but inefficient.
  See the link in footnote 2.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 08 Aug 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/data-structures/2015/08/08/esovectors/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/data-structures/2015/08/08/esovectors/</guid>
      </item>
    
      <item>
        <title>The Most Influential Works, According to TvTropes</title>
        <description>&lt;p&gt;asdasdasdasdasd&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Jul 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/project/2015/07/08/quis-custodiet/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/project/2015/07/08/quis-custodiet/</guid>
      </item>
    
      <item>
        <title>Recursion and You</title>
        <description>&lt;p&gt;Recently, I started working on a personal project to crawl TvTropes,
essentially a casual wiki for discussing pop culture, make a graph of
those works which reference each other, and then calculate the “impact
factor” of each work in the same way as Google judges the quality of a
website by the people that link to it.&lt;/p&gt;

&lt;p&gt;I had this as my first attempt at crawling TvTropes.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bs4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sets&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;

    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tvtropes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://tvtropes.org&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;Add the links to the set we&amp;#39;ve crawled and return&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        the new ones.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;Crawl a website in depth first order and print out every&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;          page we find in it&amp;#39;s domain.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLinks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&amp;#39;&amp;#39;&amp;#39;Use BeautifulSoup to scrape the page and filter the links on it&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;          for certain things we know we don&amp;#39;t want to crawl.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvtropes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;mailto&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;javascript&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;?action&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;php&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;pmwiki.php&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvtropes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvtropes&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;crawl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tvtropes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It was horribly broken of course, Python doesn’t let you recurse
more than 1000 levels by default. This is actually a feature, since
such deep recursion is usually a bug outside of functional programming.
The reason I was running into it here was because I was essentially
trying to recursively walk a tree with a node for every page on TvTropes,
which has about a half million of them by my count. My initial workaround
was to just do &lt;code&gt;sys.setrecursionlimit(2000000)&lt;/code&gt; and get rid of the limit. 
This wasn’t the right thing to do and the crawler was missing substantial
numbers of pages.&lt;/p&gt;

&lt;p&gt;The solution to my problem was to just use the scrapy library. It was
much faster than my code and wasn’t missing pages. As a general rule,
if you have a need for some code that does X and you’re not trying to
learn more about X you should look for a library instead of rolling your
own. If you have to roll your own, then you should make it an open-source
project and give back to the community. The way scrapy “walks the tree”
if it has a queue of webpages to crawl that it pushes webpages onto and
pops them out of. This gets around the issue of limited stack space, by
allocating everything on the heap and is the efficient way if your language
does not automatically optimize tail recursion. Spoiler alert, Python doesn’t.&lt;/p&gt;

&lt;p&gt;In a language that does optimize tail calls, such as Haskell instead of
allocating more room on the stack every time we call a function, we can
check if the function call is the final expression in a method and choose
to reuse the stack space from the function that we’re calling from. This
works because we know none of the data stored in that part of the stack
is needed anymore.&lt;/p&gt;

</description>
        <pubDate>Mon, 29 Jun 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/stack/recursion/2015/06/29/recursion-and-you/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/stack/recursion/2015/06/29/recursion-and-you/</guid>
      </item>
    
      <item>
        <title>Running into the Spike: A Retrospective</title>
        <description>&lt;h4 id=&quot;intro&quot;&gt;Intro&lt;/h4&gt;

&lt;p&gt;I recently made a project to list the languages a GitHub user has in
all of their repositories. You can find it at
&lt;a href=&quot;https://joshuasnider3.com/GitHubBOC&quot;&gt;https://www.joshuasnider.com/GitHubBOC&lt;/a&gt;.
This is just the thoughts I wrote down while making it organized in
a moderately presentable way. &lt;/p&gt;

&lt;h4 id=&quot;motivations&quot;&gt;Motivations&lt;/h4&gt;

&lt;p&gt;I’ve never been more intimidated in my life than when I try to learn
something and don’t know where to start. I’ve felt this feeling when
learning a programming language completely different than one I already
know, when trying to study quantitative finance, and whenever I try to
learn web or mobile development.&lt;/p&gt;

&lt;p&gt;I had a couple motivations for learning web development which can be
separated cleanly into an actual desire to make
&lt;a href=&quot;https://joshuasnider.com/GitHubBOC&quot;&gt;this code&lt;/a&gt; and inspiration
I’ve received from the wider community. First among my intrinsic
motivations, is an actual desire to have a tool to show the language breakdown
among all of my GitHub repos, so I can use it myself. I tried asking
&lt;a href=&quot;http://webapps.stackexchange.com/q/75027/&quot;&gt;Stack Exchange&lt;/a&gt;,
if they knew someone who already did it a couple months ago, but none of
the similar work out there met my needs so I did it myself. Second, I
feel I’ve reached the point in my career as a computer scientist where my
skills need to be broad enough that I am able to do web development when
called upon and this project was of a good scope for learning AngularJS.
My third intrinsic motivation came from my interest in comparative
programming languages, the event-based models common to web programming are
substantially different from the functional, imperative, and object-oriented
paradigms I’ve experienced in other languages.&lt;/p&gt;

&lt;p&gt;Extrinsic motivation for this project came from a few sources. I’ve
recently started showing off my work on Hacker News and think if I had
some more visually appealing work it would be well received. I was also
inspired by &lt;a href=&quot;http://genius.com/4126913/Genius-the-genius-isms/Run-into-the-spike&quot;&gt;this passage&lt;/a&gt;
from a blog about always doing whatever you least like to do which also
inspired the title. Lastly, I was inspired by &lt;a href=&quot;http://carl.flax.ie/dothingstellpeople.html&quot;&gt;this blog post&lt;/a&gt;.
The idea of “doing cool things and telling people” isn’t specific to
web development or even computer science, but it was a good kick to get
me to actually do it.&lt;/p&gt;

&lt;p&gt;All in all, I had a project idea and sufficient motivation to finally sit
down and learn some web development. Getting started was a bit of a
challenge and I lost some internet points by asking noobish questions
on Stack Overflow, but I feel pretty good now and expect to finish this
project before New York. I swear that I will not rest until I get a star
on my JavaScript GitHub repos, because after all worthless internet points
are the most valuable thing in the universe.&lt;/p&gt;

&lt;h4 id=&quot;obstacles&quot;&gt;Obstacles&lt;/h4&gt;

&lt;p&gt;Like all software projects, this one faced setbacks and delays. I
originally started working on a node.js app and got everything but the
pretty pictures done before finding out that you can’t run server-side
code on GitHub pages. At this point, I decided to switch to a d3js and
angular app. I knew absolutely nothing about these, but I worked through
the “Intro to JavaScript” and “AngularJS” tutorials on Codecademy. I’m
definitely not the target audience for the “Intro to JavaScript” tutorial,
but it did expand my knowledge of JavaScript’s OOP support. The “AngularJS”
tutorial was much more interesting. The idea of binding actions directly to
pieces of html seems extremely powerful and I’d really like to know both
what kind of black magic is done to actually implement it and what the
practical limitations of it are. I eventually ended up using uvCharts
(which is built on d3) for my charts because I saw an example “StackedBar”
chart that was exactly what I wanted to do. There was one problem with it
that took some time for me to discover, the dataset needs to have a value
specified for each category(not actually the category) and they need to be
in the same order for each category. There’s still one bug in the project
that is a huge pain, where because we’re not logged into GitHub it will
throttle our GitHub requests after the third or fourth person. The solution
to that one is to just have the user log into GitHub when they want to use
it, this would overcome the throttling issues and we’d be able to show them
their own repos (instead of mine) by default which would be better. I had
some difficulty catching the errors that we receive when we’re being
throttled, but I choose to blame that on inadequate documentation.&lt;/p&gt;

&lt;h4 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h4&gt;

&lt;p&gt;From my previous experience as a teaching assistant, I don’t have a very
good opinion of people who want to look at working code while writing their
own similar code. For most of my life, I’ve thought these people are at
worst plagiarists and at best cargo cultists. Neither option being
associated with competence, but at least in this project I saw the value
of having a few working examples from Codecademy which I could reference
when I didn’t know why something wasn’t working, but couldn’t make that
confusion isn’t a question worthy of Stack Overflow. I also spent a couple
hours on Skillport which is a tutorial service provided by my employer,
but it was nowhere near as helpful as Codecademy and Google. I think the
value of looking at working code depends on the subject matter, in areas
like computer vision and AI coming up with the idea behind the code takes
95% of the thought and reading someone else’s code is less useful than
picking up a textbook. In something extremely visual like web programming
the actual implementation of a beautiful website is of much more importance
than the ability to sketch one out on paper.&lt;/p&gt;

&lt;p&gt;This project also made me install and setup a LAMP server which I use to
debug JavaScript in the browser and was a learning experience to set it up
correctly.&lt;/p&gt;

&lt;p&gt;One thing that was also interesting about JavaScript was that there’s a
lot of asynchronous functions that take callbacks. The reason for this is
that waiting for a response from a server takes forever compared to running
any reasonable amount of code and waiting for someone who may be on the
other side of the globe to respond to you when you could be doing something
productive is a guaranteed way to kill performance. A language that only
did asynchronous callbacks would be pretty mind-warping, what are the odds
Erlang is like that?&lt;/p&gt;

&lt;p&gt;I’d be surprised if there’s anyone actually reading this, but I have a
message for them: If you learn anything from this blog post, you should
learn to find whatever challenge you find most intimidating, even,
especially in fact, if it’s not programming and just tackle it now,
immediately, and head on. Especially, if it’s commenting on this post.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/opinion/web-development/2015/06/22/running-into-the-spike/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/opinion/web-development/2015/06/22/running-into-the-spike/</guid>
      </item>
    
      <item>
        <title>Compiling Uncool to the JVM with Scala</title>
        <description>&lt;p&gt;I recently made a compiler in Scala that takes UnCool code and targets
the JVM. Its source is &lt;a href=&quot;https://github.com/jsnider3/Scales&quot;&gt;here&lt;/a&gt;. I made
this compiler to gain a deeper understanding of Java development and
learning how to handwrite JVM code helped me understand James Gosling’s
mind. Additionally, I wanted to learn one of the functional JVM languages.
A friend suggested Clojure, but I felt it was too Lispy for me. What
finally sold me on Scala was seeing a few job ads from companies I want to
work for that were looking for Scala engineers.&lt;/p&gt;

&lt;p&gt;Writing a compiler might seem like a massive undertaking to many people,
but it’s a lot easier than many think and I have enough experience
implementing programming languages that writing a compiler is enough to
“battle test” my knowledge of a language I’m trying to learn without
taking an excessive amount of time. I already had an IA32-targeting
compiler for UnCool written in Java
&lt;a href=&quot;https://github.com/jsnider3/Uncool&quot;&gt;here&lt;/a&gt;, though it wasn’t much help
for this project. That was partly because a lot of a compiler is
architecture dependent and partly because the parsing differs
substantially between Java’s yacc/JFlex and Scala’s parser combinators.
The main reason to not reuse work from my old compiler is that I have grown
as a programmer substantially since I wrote the original program and it
would have held me back to copy ideas from it.&lt;/p&gt;

&lt;p&gt;While building the compiler, I used a development methodology similar to
test-driven development, with a Travis build running as quickly as
possible. I copied the test cases from my old IA32 compiler project and
iterating from simplest to most complex wrote the code needed to make them
pass. There was a five-step cycle for adding a feature:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Parse the test source code correctly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Generate valid jasmin code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Improve the code generation until the java verifier would accept it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Continue editing until the output from running the code was correct.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nod approvingly and move on to the next test case.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This development cycle allowed me to keep the build running while still
verifying that I was making forward progress without regression.&lt;/p&gt;

&lt;p&gt;Obviously, the project had challenges which I worked to overcome. Starting
out, I had some trouble with Scala’s parser combinators which I solved by
seeking help from the StackOverflow community. Later, when I was close to
finishing if-statements I ran into an issue with my code putting the java
stack in an inconsistent state. That is, depending on which branch of the
if-statement, the quantity and types of variables would differ on the
stack. This possibility of an inconsistent state is prohibited by the java
class verifier because it is not type safe. My solution was to track of
how much each expression  pushes onto the stack and then pop everything
off that was not going to be used. At one point, when trying to allocate
local variables, I had a brief panic attack when I thought the number of
local variables in the JVM was limited to five of each type. This was
because I saw the instructions &lt;code&gt;iload_3&lt;/code&gt;, &lt;code&gt;aload_0&lt;/code&gt;, and &lt;code&gt;iload_2&lt;/code&gt; and
tried to extend them out arbitrarily, to say &lt;code&gt;iload_12&lt;/code&gt;. This was a
misunderstanding on my part: The &lt;code&gt;iload_#&lt;/code&gt; instructions are not a single
instruction that take a number as an argument but are actually separate
instructions optimized for the first few locals. The correct instructions
for working with arbitrary local variables are &lt;code&gt;iload #&lt;/code&gt;, &lt;code&gt;istore #&lt;/code&gt;,
&lt;code&gt;aload #&lt;/code&gt; and &lt;code&gt;astore #&lt;/code&gt;. I continued my habit of using makefiles for all
programming languages, instead of taking the time to actually learn how to
use &lt;code&gt;ocamlbuild&lt;/code&gt; or &lt;code&gt;sbt&lt;/code&gt;. This made me waste an excessive amount of time
waiting for code to compile, so I should just bite the bullet for my next
project.&lt;/p&gt;

&lt;p&gt;There are some bugs I know of that aren’t covered by the test cases: it
will fail on methods with more than 32 local variables and if-else
expressions where the two branches typecheck to classes related through
inheritance. Additionally the parser doesn’t take into account operator
precedence. Even with these bugs, I chose to stop coding now when it
passes all of the test cases from the previous project, because I wanted
the experience to be as comparable as possible to writing my old one.&lt;/p&gt;

&lt;p&gt;From my short time of working with Scala, I gained a strong appreciation
of it. It has the terseness expected of good functional languages, has
literally every feature I want (notably case classes and enums, which are
the main thing I find lacking in Python) and has a nice built-in library
both from the libraries provided by its creators and from being compatible
with the JVM. I can see why it’s well-liked among its community.&lt;/p&gt;

&lt;p&gt;The JVM itself is also a neat piece of work. The idea of an “assembly”
language with built in type-safety is a pretty powerful one. Besides the
large amount of money Sun spent promoting it, the brilliance of the JVM is
a key component in the popularity of languages that target it.&lt;/p&gt;

&lt;p&gt;In the future, I plan on getting involved with CPython’s development to
make something useful out of my passion for programming languages and give
back to the community. Thanks for reading.&lt;/p&gt;

</description>
        <pubDate>Thu, 11 Jun 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/scala/uncool/compiler/2015/06/11/uncool-in-scala/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/scala/uncool/compiler/2015/06/11/uncool-in-scala/</guid>
      </item>
    
      <item>
        <title>Introducing Honey Badger</title>
        <description>&lt;p&gt;I made a programming language called Honey Badger about a month ago.
You can read about it at its &lt;a href=&quot;https://www.joshuasnider.com/HoneyBadger&quot;&gt;project page&lt;/a&gt; or at
the &lt;a href=&quot;https://github.com/jsnider3/HoneyBadger&quot;&gt;repo&lt;/a&gt;, but I’d like to
take a moment to talk about my motivations for doing it.&lt;/p&gt;

&lt;p&gt;A good chunk of my motivation was to be able to point to the reference
implementation whenever someone asks for proof that I know OCaml (a
situation which will only occur if I basically prompt them to). The
rest of my motivation was to be able to say that I’ve done an entire
programming language from conception, to specification, to implementation
all by myself, I’ve done parts of languages before but not the entire thing.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;
</description>
        <pubDate>Fri, 29 May 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/honeybadger/2015/05/29/introducing-honey-badger/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/honeybadger/2015/05/29/introducing-honey-badger/</guid>
      </item>
    
      <item>
        <title>Book Review: More Ocaml: Algorithms, Methods, and Diversions</title>
        <description>&lt;p&gt;My first attempt to learn OCaml was back in January, it largely took the
form of “write code and then ask Google why it doesn’t work.” You can
see the results of that process at 
&lt;a href=&quot;https://github.com/jsnider3/newbie_OCaml&quot;&gt;https://github.com/jsnider3/newbie_OCaml&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;This wasn’t the fastest process and instilled in me a deep rage at
OCaml for repeatedly failing to be Haskell. I decided to be more 
disciplined with my second attempt to learn OCaml and ordered a dead-tree
copy of “More OCaml: Algorithms, Methods, and Diversions” by John 
Whitington.  &lt;/p&gt;

&lt;p&gt;The book starts off assuming the reader knows how to program,
just like it’s advertised, and shoves all the details of writing a 
working OCaml into the preface. The first chapter is all about
learning to appreciate the power of &lt;code&gt;fold&lt;/code&gt; in functional programming and
the second chapter is showing how to implement lazy lists in OCaml, just 
in case those snooty Haskellers think their language is more powerful.&lt;/p&gt;

&lt;p&gt;Moving on through the book, experienced programmers learn how to do 
run-length encoding compression, a limited form of regexes, and
 playing tic-tac-toe in OCaml and eventually create pdfs programmatically.  &lt;/p&gt;

&lt;p&gt;The book uses an excessive amount of while and for loops, but it’s
definitely a good book for experienced programmers wishing to learn
OCaml to work through.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/ocaml/books/2015/04/18/more-ocaml-book/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/ocaml/books/2015/04/18/more-ocaml-book/</guid>
      </item>
    
      <item>
        <title>On the Utility of Singleton Tuples</title>
        <description>&lt;p&gt;Formally, a tuple is an ordered list of elements. As a type, its elements 
may have arbitrary type, but its length is fixed. Many programming 
languages (and almost all functional programming languages) have 
them, while others prefer the programmer create structs or objects instead.&lt;/p&gt;

&lt;p&gt;Most tuples used in code have between two and four elements. It’s a 
huge pain to read and maintain code with extra-large tuples and 
anything that needs to be that large starts to accumulate helper 
methods which would be useful to wrap up in a class/module/namespace.&lt;/p&gt;

&lt;p&gt;The tuple containing zero elements is formally known as the unit type. 
In code, it sees uses as a dummy argument to functions (OCaml), as a 
placeholder for the empty list (Lisp), and as a representation of 
&lt;code&gt;Void&lt;/code&gt; (Swift).&lt;/p&gt;

&lt;p&gt;The tuple containing a single element is known as a singleton. Despite 
having a strong mathematical foundation, very few languages make the 
distinction between a singleton of a type and the type itself. In all 
the languages I know of where tuples are created by putting parentheses 
around a comma-seperated list trying to create a singleton tuple will 
result in the parentheses being ignored. C# makes the distinction through 
it’s &lt;code&gt;Tuple&amp;lt;T1&amp;gt;&lt;/code&gt; class and Python allows you to make a single tuple 
through adding a comma (i.e. &lt;code&gt;(5,)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The most likely reason for the reluctance of language designers to include 
the singleton tuple, is the lack of scenarios where it would come in 
handy. It’s certainly convenient if you’re a type theorist, but other than 
that the only case where it might be useful is in Python where tuples are 
constant; if you absolutely positively needed a variable in Python to be a 
constant you could wrap it as a tuple.&lt;/p&gt;

&lt;p&gt;If you know scenarios where a singleton tuple would be useful, you should 
leave a comment below.  &lt;/p&gt;
</description>
        <pubDate>Tue, 07 Apr 2015 08:00:00 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/theory/2015/04/07/on-the-utility-of-singleton-tuples/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/theory/2015/04/07/on-the-utility-of-singleton-tuples/</guid>
      </item>
    
      <item>
        <title>What does the title mean anyway?</title>
        <description>&lt;p&gt;There’s a short answer and a long answer to that question.
The short answer is that &lt;code&gt;(\x -&amp;gt; &quot;Blog&quot;)&lt;/code&gt; defines an anonymous function
in Haskell that takes a simple argument of arbitrary type, ignores it, 
and returns “Blog”.&lt;/p&gt;

&lt;p&gt;The long way to define this function would be as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Blog&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For those unfamiliar with Haskell’s lazy evaluation, this function has
a strange feature. Calling &lt;code&gt;foo&lt;/code&gt; with  an &lt;code&gt;a&lt;/code&gt; designed to crash, such as
&lt;code&gt;foo undefined&lt;/code&gt; or &lt;code&gt;foo (error &quot;DIE!&quot;)&lt;/code&gt; will run perfectly fine.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 21:17:54 -0400</pubDate>
        <link>http://www.joshuasnider.com/update/haskell/2015/03/28/what-does-the-title-mean-anyway/</link>
        <guid isPermaLink="true">http://www.joshuasnider.com/update/haskell/2015/03/28/what-does-the-title-mean-anyway/</guid>
      </item>
    
  </channel>
</rss>
